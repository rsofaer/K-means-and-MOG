;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; turn a bunch of tiles into an image.
(de tiles-to-image (in out)
  (let ((k 0))
    (for (i 0 (1- (div (idx-dim out 0) 8)))
	 (for (j 0 (1- (div (idx-dim out 1) 8)))
	      (copy-matrix
	       (select in 0 k)
	       (narrow (narrow out 0 8 (* i 8)) 1 8 (* j 8)))
	      (incr k)))))


;; break an image into 8x8 tiles. This is the
;; function that was used to produce tiles.mat.
;; You do not need to run this function as tiles.mat
;; is provided in this directory.
(de image-to-tiles (infile outfile)
  (let* ((th 8)
	 (tw 8)
	 (raw (image-read-ubim infile))
	 (raw-h (idx-dim raw 0))
	 (raw-w (idx-dim raw 1))
	 (sh (div raw-h th))
	 (sw (div raw-w tw))
	 (in (narrow (narrow raw 0 (* th sh) 0) 1 (* tw sw) 0))
	 (out (matrix (* sh sw) (* th tw)))
	 (k 0))
    (for (i 0 (1- sh)) 
	 (for (j 0 (1- sw))
	      (copy-matrix (narrow (narrow in 0 th (* th i)) 1 tw (* tw j))
			   (select out 0 k))
	      (incr k)))
    (save-matrix out outfile)
    out))


